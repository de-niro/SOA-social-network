// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// EmailVerificationStatus defines model for EmailVerificationStatus.
type EmailVerificationStatus struct {
	Deadline *string `json:"deadline,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// EmailVerificationToken defines model for EmailVerificationToken.
type EmailVerificationToken struct {
	Token *string `json:"token,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Text *string `json:"text,omitempty"`
}

// User defines model for User.
type User struct {
	AccountStatus      *string `json:"account_status,omitempty"`
	Bio                *string `json:"bio,omitempty"`
	Birthday           *string `json:"birthday,omitempty"`
	Email              *string `json:"email,omitempty"`
	EmailVerified      *bool   `json:"email_verified,omitempty"`
	FullName           *string `json:"full_name,omitempty"`
	Id                 *int    `json:"id,omitempty"`
	Phone              *string `json:"phone,omitempty"`
	RegistrationString *string `json:"registration_string,omitempty"`
	UpdateString       *string `json:"update_string,omitempty"`
	Username           *string `json:"username,omitempty"`
}

// UserLogon defines model for UserLogon.
type UserLogon struct {
	Email    *string `json:"email,omitempty"`
	Passwd   string  `json:"passwd"`
	Phone    *string `json:"phone,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserLogonToken defines model for UserLogonToken.
type UserLogonToken struct {
	AuthToken *string `json:"auth_token,omitempty"`
	Id        *int    `json:"id,omitempty"`
}

// UserReg defines model for UserReg.
type UserReg struct {
	Birthday *string `json:"birthday,omitempty"`
	Email    string  `json:"email"`
	FullName *string `json:"full_name,omitempty"`
	Passwd   string  `json:"passwd"`
	Phone    string  `json:"phone"`
	Username string  `json:"username"`
}

// PostEditCredentialsJSONRequestBody defines body for PostEditCredentials for application/json ContentType.
type PostEditCredentialsJSONRequestBody = UserLogon

// PostEditInfoJSONRequestBody defines body for PostEditInfo for application/json ContentType.
type PostEditInfoJSONRequestBody = User

// PostEmailVerifyJSONRequestBody defines body for PostEmailVerify for application/json ContentType.
type PostEmailVerifyJSONRequestBody = EmailVerificationToken

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = UserLogon

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = UserReg

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Edit user credentials
	// (POST /edit/credentials)
	PostEditCredentials(c *gin.Context)
	// Edit user info
	// (POST /edit/info)
	PostEditInfo(c *gin.Context)
	// Get verification status
	// (GET /email/verify)
	GetEmailVerify(c *gin.Context)
	// Perform email verification
	// (POST /email/verify)
	PostEmailVerify(c *gin.Context)
	// Session logon
	// (POST /login)
	PostLogin(c *gin.Context)
	// Register a new user
	// (POST /register)
	PostRegister(c *gin.Context)
	// Get user info by username
	// (GET /users/{username})
	GetUsersUsername(c *gin.Context, username string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostEditCredentials operation middleware
func (siw *ServerInterfaceWrapper) PostEditCredentials(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEditCredentials(c)
}

// PostEditInfo operation middleware
func (siw *ServerInterfaceWrapper) PostEditInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEditInfo(c)
}

// GetEmailVerify operation middleware
func (siw *ServerInterfaceWrapper) GetEmailVerify(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEmailVerify(c)
}

// PostEmailVerify operation middleware
func (siw *ServerInterfaceWrapper) PostEmailVerify(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEmailVerify(c)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRegister(c)
}

// GetUsersUsername operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUsername(c *gin.Context) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", c.Param("username"), &username, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUsername(c, username)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/edit/credentials", wrapper.PostEditCredentials)
	router.POST(options.BaseURL+"/edit/info", wrapper.PostEditInfo)
	router.GET(options.BaseURL+"/email/verify", wrapper.GetEmailVerify)
	router.POST(options.BaseURL+"/email/verify", wrapper.PostEmailVerify)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.POST(options.BaseURL+"/register", wrapper.PostRegister)
	router.GET(options.BaseURL+"/users/:username", wrapper.GetUsersUsername)
}

type PostEditCredentialsRequestObject struct {
	Body *PostEditCredentialsJSONRequestBody
}

type PostEditCredentialsResponseObject interface {
	VisitPostEditCredentialsResponse(w http.ResponseWriter) error
}

type PostEditCredentials201Response struct {
}

func (response PostEditCredentials201Response) VisitPostEditCredentialsResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostEditCredentialsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostEditCredentialsdefaultJSONResponse) VisitPostEditCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEditInfoRequestObject struct {
	Body *PostEditInfoJSONRequestBody
}

type PostEditInfoResponseObject interface {
	VisitPostEditInfoResponse(w http.ResponseWriter) error
}

type PostEditInfo201Response struct {
}

func (response PostEditInfo201Response) VisitPostEditInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostEditInfodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostEditInfodefaultJSONResponse) VisitPostEditInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEmailVerifyRequestObject struct {
}

type GetEmailVerifyResponseObject interface {
	VisitGetEmailVerifyResponse(w http.ResponseWriter) error
}

type GetEmailVerify200JSONResponse EmailVerificationStatus

func (response GetEmailVerify200JSONResponse) VisitGetEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEmailVerifyRequestObject struct {
	Body *PostEmailVerifyJSONRequestBody
}

type PostEmailVerifyResponseObject interface {
	VisitPostEmailVerifyResponse(w http.ResponseWriter) error
}

type PostEmailVerify201Response struct {
}

func (response PostEmailVerify201Response) VisitPostEmailVerifyResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostEmailVerifydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostEmailVerifydefaultJSONResponse) VisitPostEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin201JSONResponse UserLogonToken

func (response PostLogin201JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostLogindefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostLogindefaultJSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201Response struct {
}

func (response PostRegister201Response) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostRegisterdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostRegisterdefaultJSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersUsernameRequestObject struct {
	Username string `json:"username"`
}

type GetUsersUsernameResponseObject interface {
	VisitGetUsersUsernameResponse(w http.ResponseWriter) error
}

type GetUsersUsername200JSONResponse User

func (response GetUsersUsername200JSONResponse) VisitGetUsersUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUsername404Response struct {
}

func (response GetUsersUsername404Response) VisitGetUsersUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Edit user credentials
	// (POST /edit/credentials)
	PostEditCredentials(ctx context.Context, request PostEditCredentialsRequestObject) (PostEditCredentialsResponseObject, error)
	// Edit user info
	// (POST /edit/info)
	PostEditInfo(ctx context.Context, request PostEditInfoRequestObject) (PostEditInfoResponseObject, error)
	// Get verification status
	// (GET /email/verify)
	GetEmailVerify(ctx context.Context, request GetEmailVerifyRequestObject) (GetEmailVerifyResponseObject, error)
	// Perform email verification
	// (POST /email/verify)
	PostEmailVerify(ctx context.Context, request PostEmailVerifyRequestObject) (PostEmailVerifyResponseObject, error)
	// Session logon
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Register a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get user info by username
	// (GET /users/{username})
	GetUsersUsername(ctx context.Context, request GetUsersUsernameRequestObject) (GetUsersUsernameResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostEditCredentials operation middleware
func (sh *strictHandler) PostEditCredentials(ctx *gin.Context) {
	var request PostEditCredentialsRequestObject

	var body PostEditCredentialsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEditCredentials(ctx, request.(PostEditCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEditCredentials")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostEditCredentialsResponseObject); ok {
		if err := validResponse.VisitPostEditCredentialsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEditInfo operation middleware
func (sh *strictHandler) PostEditInfo(ctx *gin.Context) {
	var request PostEditInfoRequestObject

	var body PostEditInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEditInfo(ctx, request.(PostEditInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEditInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostEditInfoResponseObject); ok {
		if err := validResponse.VisitPostEditInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEmailVerify operation middleware
func (sh *strictHandler) GetEmailVerify(ctx *gin.Context) {
	var request GetEmailVerifyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmailVerify(ctx, request.(GetEmailVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmailVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEmailVerifyResponseObject); ok {
		if err := validResponse.VisitGetEmailVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEmailVerify operation middleware
func (sh *strictHandler) PostEmailVerify(ctx *gin.Context) {
	var request PostEmailVerifyRequestObject

	var body PostEmailVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEmailVerify(ctx, request.(PostEmailVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEmailVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostEmailVerifyResponseObject); ok {
		if err := validResponse.VisitPostEmailVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx *gin.Context) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx *gin.Context) {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx, request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		if err := validResponse.VisitPostRegisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersUsername operation middleware
func (sh *strictHandler) GetUsersUsername(ctx *gin.Context, username string) {
	var request GetUsersUsernameRequestObject

	request.Username = username

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUsername(ctx, request.(GetUsersUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUsername")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersUsernameResponseObject); ok {
		if err := validResponse.VisitGetUsersUsernameResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
